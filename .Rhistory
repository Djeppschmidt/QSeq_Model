ALDEx.FN<-c(rep(NA,length(x)))
ALDEx.GTP<-c(rep(NA,length(x)))
ALDEx.GTN<-c(rep(NA,length(x)))
ALDEx.GFP<-c(rep(NA,length(x)))
ALDEx.GFN<-c(rep(NA,length(x)))
ancom.TP<-c(rep(NA,length(x)))
ancom.TN<-c(rep(NA,length(x)))
ancom.FP<-c(rep(NA,length(x)))
ancom.FN<-c(rep(NA,length(x)))
ancom.GTP<-c(rep(NA,length(x)))
ancom.GTN<-c(rep(NA,length(x)))
ancom.GFP<-c(rep(NA,length(x)))
ancom.GFN<-c(rep(NA,length(x)))
QSeq.TP<-c(rep(NA,length(x)))
QSeq.TN<-c(rep(NA,length(x)))
QSeq.FP<-c(rep(NA,length(x)))
QSeq.FN<-c(rep(NA,length(x)))
QSeq.GTP<-c(rep(NA,length(x)))
QSeq.GTN<-c(rep(NA,length(x)))
QSeq.GFP<-c(rep(NA,length(x)))
QSeq.GFN<-c(rep(NA,length(x)))
for(i in 1:length(x)){
ALDEx.TP[i]<-x[[i]]$effectaccuracy[1,1]
ALDEx.TN[i]<-x[[i]]$effectaccuracy[1,2]
ALDEx.FP[i]<-x[[i]]$effectaccuracy[1,3]
ALDEx.FN[i]<-x[[i]]$effectaccuracy[1,4]
ALDEx.GTP[i]<-x[[i]]$effectaccuracy[1,5]/sum(x[[i]]$diftab[,4]<0.05)
ALDEx.GTP[i][is.na(ALDEx.GTP[i])]<-0
ALDEx.GTN[i]<-x[[i]]$effectaccuracy[1,6]
ALDEx.GFP[i]<-x[[i]]$effectaccuracy[1,7]/sum(x[[i]]$diftab[,4]>0.05)
ALDEx.GFN[i]<-x[[i]]$effectaccuracy[1,8]
ancom.TP[i]<-x[[i]]$effectaccuracy[5,1]
ancom.TN[i]<-x[[i]]$effectaccuracy[5,2]
ancom.FP[i]<-x[[i]]$effectaccuracy[5,3]
ancom.FN[i]<-x[[i]]$effectaccuracy[5,4]
ancom.GTP[i]<-x[[i]]$effectaccuracy[5,5]/sum(x[[i]]$diftab[,4]<0.05)
ancom.GTP[i][is.na(ancom.GTP[i])]<-0
ancom.GTN[i]<-x[[i]]$effectaccuracy[5,6]
ancom.GFP[i]<-x[[i]]$effectaccuracy[5,7]/sum(x[[i]]$diftab[,4]>0.05)
ancom.GFN[i]<-x[[i]]$effectaccuracy[5,8]
QSeq.TP[i]<-x[[i]]$effectaccuracy[9,1]
QSeq.TN[i]<-x[[i]]$effectaccuracy[9,2]
QSeq.FP[i]<-x[[i]]$effectaccuracy[9,3]
QSeq.FN[i]<-x[[i]]$effectaccuracy[9,4]
QSeq.GTP[i]<-x[[i]]$effectaccuracy[10,5]/sum(x[[i]]$diftab[,4]<0.05)
QSeq.GTP[i][is.na(QSeq.GTP[i])]<-0
QSeq.GTN[i]<-x[[i]]$effectaccuracy[10,6]
QSeq.GFP[i]<-x[[i]]$effectaccuracy[10,7]/sum(x[[i]]$diftab[,4]>0.05)
QSeq.GFN[i]<-x[[i]]$effectaccuracy[10,8]
}
valdf<-data.frame(ALDEx.TP, ALDEx.TN, ALDEx.FP, ALDEx.FN, ALDEx.GTP,ALDEx.GTN,ALDEx.GFP,ALDEx.GFN,ancom.TP,ancom.TN,ancom.FP,ancom.FN,ancom.GTP,ancom.GTN,ancom.GFP,ancom.GFN,QSeq.TP,QSeq.TN,QSeq.FP,QSeq.FN, QSeq.GTP,QSeq.GTN,QSeq.GFP,QSeq.GFN)
outtab[1,1]<-mean(ALDEx.TP)
outtab[1,2]<-sd(ALDEx.TP)/sqrt(length(ALDEx.TP))
outtab[1,3]<-mean(ALDEx.FP)
outtab[1,4]<-sd(ALDEx.FP)/sqrt(length(ALDEx.FP))
outtab[1,5]<-mean(ALDEx.TN)
outtab[1,6]<-sd(ALDEx.TN)/sqrt(length(ALDEx.TN))
outtab[1,7]<-mean(ALDEx.FN)
outtab[1,8]<-sd(ALDEx.FN)/sqrt(length(ALDEx.FN))
outtab[1,9]<-mean(ALDEx.GTP)
outtab[1,10]<-sd(ALDEx.GTP)/sqrt(length(ALDEx.GTP))
outtab[1,11]<-mean(ALDEx.GFP)
outtab[1,12]<-sd(ALDEx.GFP)/sqrt(length(ALDEx.GFP))
outtab[1,13]<-mean(ALDEx.GTN)
outtab[1,14]<-sd(ALDEx.GTN)/sqrt(length(ALDEx.GTN))
outtab[1,15]<-mean(ALDEx.GFN)
outtab[1,16]<-sd(ALDEx.GFN)/sqrt(length(ALDEx.GFN))
outtab[2,1]<-mean(ancom.TP)
outtab[2,2]<-sd(ancom.TP)/sqrt(length(ancom.TP))
outtab[2,3]<-mean(ancom.FP)
outtab[2,4]<-sd(ancom.FP)/sqrt(length(ancom.FP))
outtab[2,5]<-mean(ancom.TN)
outtab[2,6]<-sd(ancom.TN)/sqrt(length(ancom.TN))
outtab[2,7]<-mean(ancom.FN)
outtab[2,8]<-sd(ancom.FN)/sqrt(length(ancom.FN))
outtab[2,9]<-mean(ancom.GTP)
outtab[2,10]<-sd(ancom.GTP)/sqrt(length(ancom.GTP))
outtab[2,11]<-mean(ancom.GFP)
outtab[2,12]<-sd(ancom.GFP)/sqrt(length(ancom.GFP))
outtab[2,13]<-mean(ancom.GTN)
outtab[2,14]<-sd(ancom.GTN)/sqrt(length(ancom.GTN))
outtab[2,15]<-mean(ancom.GFN)
outtab[2,16]<-sd(ancom.GFN)/sqrt(length(ancom.GFN))
outtab[3,1]<-mean(QSeq.TP)
outtab[3,2]<-sd(QSeq.TP)/sqrt(length(QSeq.TP))
outtab[3,3]<-mean(QSeq.FP)
outtab[3,4]<-sd(QSeq.FP)/sqrt(length(QSeq.FP))
outtab[3,5]<-mean(QSeq.TN)
outtab[3,6]<-sd(QSeq.TN)/sqrt(length(QSeq.TN))
outtab[3,7]<-mean(QSeq.FN)
outtab[3,8]<-sd(QSeq.FN)/sqrt(length(QSeq.FN))
outtab[3,9]<-mean(QSeq.GTP)
outtab[3,10]<-sd(QSeq.GTP)/sqrt(length(QSeq.GTP))
outtab[3,11]<-mean(QSeq.GFP)
outtab[3,12]<-sd(QSeq.GFP)/sqrt(length(QSeq.GFP))
outtab[3,13]<-mean(QSeq.GTN)
outtab[3,14]<-sd(QSeq.GTN)/sqrt(length(QSeq.GTN))
outtab[3,15]<-mean(QSeq.GFN)
outtab[3,16]<-sd(QSeq.GFN)/sqrt(length(QSeq.GFN))
out<-NULL
out$accuracytab<-outtab
out$df<-valdf
out
}
#' combine halves of two different correlation matrices
#' @param a matrix 1
#' @param b matrix 2
#' @keywords
#' @export
#' @examples
#' combineMatrix()
combineMatrix<-function(a, b){
new <- matrix(NA, nrow = nrow(a), ncol = ncol(a))
new[upper.tri(new)] <- a[upper.tri(a)]
new[lower.tri(new)] <- b[lower.tri(b)]
new[is.na(new)]<-0
rownames(new)<-rownames(a)
colnames(new)<-colnames(a)
new
}
#' make plots for total abundance estimation error
#' @param aeffect.list list of outputs from getSummary.NG
#' @keywords
#' @export
#' @examples
#' make.plot3
make.plot3<-function(effect.list){
require(ggplot2)
require(reshape2)
require(dplyr)
df<-ldply(effect.list, cbind)
df$level<-c(rep(names(effect.list)[1], 3),rep(names(effect.list)[2], 3),rep(names(effect.list)[3], 3),rep(names(effect.list)[4], 3),rep(names(effect.list)[5], 3),rep(names(effect.list)[6], 3),rep(names(effect.list)[7], 3),rep(names(effect.list)[8], 3))
df$TRT<-c(rep(c("ALDEx", "ancomBC", "QSeq")))
#df1<-melt(df[,c(1,2)], id=c("Reference Mean", "Reference SE"))
#df2<-melt(df[,c(3,4)], id=c("Ref.Gradient Mean", "Ref.Gradient SE"))
#df1<-df[,c(2,3,6,7)]
#print(df1)
#df2<-df[,c(3,4,5)]
TP<-ggplot(df, aes(x=level, y=TP.Mean, group=TRT))+
geom_line(aes(color=TRT)) +
geom_point(aes(color=TRT)) +
geom_ribbon(aes(ymin=TP.Mean-TP.SE, ymax=TP.Mean+TP.SE), alpha=.1)+
ggtitle("TRUE Positive, No Gradient") +
ylab("Mean True Positive") +
xlab("Total Abundance Estimation Error (SD)") +
scale_fill_manual(values=c("#5A4A6F", "#E47250", "#9D5A6C")) +
scale_colour_manual(values = c("#5A4A6F", "#E47250", "#9D5A6C")) +
theme_bw()
TN<-ggplot(df, aes(x=level, y=TN.Mean, group=TRT))+
geom_line(aes(color=TRT)) +
geom_point(aes(color=TRT)) +
geom_ribbon(aes(ymin=TN.Mean-TN.SE, ymax=TN.Mean+TN.SE), alpha=.1)+
ggtitle("TRUE Negative, No Gradient") +
ylab("Mean True Negative") +
xlab("Total Abundance Estimation Error (SD)") +
scale_fill_manual(values=c("#5A4A6F", "#E47250", "#9D5A6C")) +
scale_colour_manual(values = c("#5A4A6F", "#E47250", "#9D5A6C")) +
theme_bw()
GTP<-ggplot(df, aes(x=level, y=GTP.Mean, group=TRT))+
geom_line(aes(color=TRT)) +
geom_point(aes(color=TRT)) +
geom_ribbon(aes(ymin=GTP.Mean-GTP.SE, ymax=GTP.Mean+GTP.SE), alpha=.1)+
ggtitle("TRUE Positive, Gradient") +
ylab("Mean True Positive") +
xlab("Total Abundance Estimation Error (SD)") +
scale_fill_manual(values=c("#5A4A6F", "#E47250", "#9D5A6C")) +
scale_colour_manual(values = c("#5A4A6F", "#E47250", "#9D5A6C")) +
theme_bw()
GTN<-ggplot(df, aes(x=level, y=GTN.Mean, group=TRT))+
geom_line(aes(color=TRT)) +
geom_point(aes(color=TRT)) +
geom_ribbon(aes(ymin=GTN.Mean-GTN.SE, ymax=GTN.Mean+GTN.SE), alpha=.1)+
ggtitle("TRUE Negative, Gradient") +
ylab("Mean True Negative") +
xlab("Total Abundance Estimation Error (SD)") +
scale_fill_manual(values=c("#5A4A6F", "#E47250", "#9D5A6C")) +
scale_colour_manual(values = c("#5A4A6F", "#E47250", "#9D5A6C")) +
theme_bw()
FP<-ggplot(df, aes(x=level, y=FP.Mean, group=TRT))+
geom_line(aes(color=TRT)) +
geom_point(aes(color=TRT)) +
geom_ribbon(aes(ymin=FP.Mean-FP.SE, ymax=FP.Mean+FP.SE), alpha=.1)+
ggtitle("FALSE Positive, No Gradient") +
ylab("Mean FALSE Positive") +
xlab("Total Abundance Estimation Error (SD)") +
scale_fill_manual(values=c("#5A4A6F", "#E47250", "#9D5A6C")) +
scale_colour_manual(values = c("#5A4A6F", "#E47250", "#9D5A6C")) +
theme_bw()
FN<-ggplot(df, aes(x=level, y=FN.Mean, group=TRT))+
geom_line(aes(color=TRT)) +
geom_point(aes(color=TRT)) +
geom_ribbon(aes(ymin=FN.Mean-FN.SE, ymax=FN.Mean+FN.SE), alpha=.1)+
ggtitle("FALSE Negative, No Gradient") +
ylab("Mean FALSE Negative") +
xlab("Total Abundance Estimation Error (SD)") +
scale_fill_manual(values=c("#5A4A6F", "#E47250", "#9D5A6C")) +
scale_colour_manual(values = c("#5A4A6F", "#E47250", "#9D5A6C")) +
theme_bw()
GFP<-ggplot(df, aes(x=level, y=GFP.Mean, group=TRT))+
geom_line(aes(color=TRT)) +
geom_point(aes(color=TRT)) +
geom_ribbon(aes(ymin=GFP.Mean-GFP.SE, ymax=GFP.Mean+GFP.SE), alpha=.1)+
ggtitle("FALSE Positive, Gradient") +
ylab("Mean FALSE Positive") +
xlab("Total Abundance Estimation Error (SD)") +
scale_fill_manual(values=c("#5A4A6F", "#E47250", "#9D5A6C")) +
scale_colour_manual(values = c("#5A4A6F", "#E47250", "#9D5A6C")) +
theme_bw()
GFN<-ggplot(df, aes(x=level, y=GFN.Mean, group=TRT))+
geom_line(aes(color=TRT)) +
geom_point(aes(color=TRT)) +
geom_ribbon(aes(ymin=GFN.Mean-GFN.SE, ymax=GFN.Mean+GFN.SE), alpha=.1)+
ggtitle("FALSE Negative, Gradient") +
ylab("Mean FALSE Negative") +
xlab("Total Abundance Estimation Error (SD)") +
scale_fill_manual(values=c("#5A4A6F", "#E47250", "#9D5A6C")) +
scale_colour_manual(values = c("#5A4A6F", "#E47250", "#9D5A6C")) +
theme_bw()
out<-NULL
out$TP<-TP
out$TN<-TN
out$FP<-FP
out$FN<-FN
out$GTP<-GTP
out$GTN<-GTN
out$GFP<-GFP
out$GFN<-GFN
out
}
# initialize base community
init.sksp05<-initialize.sparseskew(nreps=100, dist = c(rlnorm(50, log(50), log(2.2))), sparse=25)
# impose gradients at different variances
gradient.test1<-impose.gradient2(init.sksp05, grad=0)
gradient.test10<-impose.gradient2(init.sksp05, grad=1)
gradient.test20<-impose.gradient2(init.sksp05, grad=2)
gradient.test30<-impose.gradient2(init.sksp05, grad=3)
gradient.test40<-impose.gradient2(init.sksp05, grad=4)
gradient.test1
effect.Gradient1$Rep1
gradient.test1$Rep1
lapply(gradient.test1$Rep1, sum)
sapply(gradient.test1$Rep1, sum)
gradient.test1$Rep1
apply(gradient.test1$Rep1, margin=1, sum)
apply(gradient.test1$Rep1, margin=1, function(x) sum(x))
?apply
apply(gradient.test1$Rep1, margin=1, sum)
apply(gradient.test1$Rep1, MARGIN=1, sum)
apply(gradient.test1$Rep1, MARGIN=2, sum)
data.frame("Variation"=c(rep(1,10), rep(10,10), rep(20,10),rep(30,10),rep(40,10)), "Treatment"= c(c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5))), "value"=c(apply(gradient.test1$Rep1, MARGIN=2, sum),apply(gradient.test10$Rep1, MARGIN=2, sum),apply(gradient.test20$Rep1, MARGIN=2, sum),apply(gradient.test30$Rep1, MARGIN=2, sum),apply(gradient.test40$Rep1, MARGIN=2, sum)))
?group_by
?stderr
?sd
Mload %>% group_by(Variation) %>% group_by(Treatment) %>% summarize(mean=mean(value), SE=sd(value)/sqrt(5))
Mload %>% group_by(Variation) %>% group_by(Treatment) %>% summarize(mean=mean(value), SE=sd(value)/sqrt(5))
library(dplyr)
Mload %>% group_by(Variation) %>% group_by(Treatment) %>% summarize(mean=mean(value), SE=sd(value)/sqrt(5))
Mload<-data.frame("Variation"=c(rep(1,10), rep(10,10), rep(20,10),rep(30,10),rep(40,10)), "Treatment"= c(c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5))), "value"=c(apply(gradient.test1$Rep1, MARGIN=2, sum),apply(gradient.test10$Rep1, MARGIN=2, sum),apply(gradient.test20$Rep1, MARGIN=2, sum),apply(gradient.test30$Rep1, MARGIN=2, sum),apply(gradient.test40$Rep1, MARGIN=2, sum)))
Mload %>% group_by(Variation) %>% group_by(Treatment) %>% summarize(mean=mean(value), SE=sd(value)/sqrt(5))
Mload %>% group_by(c(Variation, Treatment)) %>% summarize(mean=mean(value), SE=sd(value)/sqrt(5))
Mload %>% group_by(Variation, Treatment) %>% summarize(mean=mean(value), SE=sd(value)/sqrt(5))
Mload %>% group_by(Variation, Treatment) %>% summarize(mean=mean(value), SE=sd(value)/sqrt(5)) ->mload
mload
p <- ggplot(mload, aes(x=Variation, y=mean, fill=Treatment)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=len-SE, ymax=len+SE), width=.2,
position=position_dodge(.9))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
p <- ggplot(mload, aes(x=Variation, y=mean, fill=Treatment)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2,
position=position_dodge(.9))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
p + theme_minimal()
p <- ggplot(mload, aes(x=Variation, y=mean, fill=as.factor(Treatment))) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2,
position=position_dodge(.9))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
impose.gradient2
gradient.test10$Rep1
gradient.test30$Rep1
init.sksp05
gradient.test30<-impose.gradient2(init.sksp05, grad=3)
Mload<-data.frame("Variation"=c(rep(1,10), rep(10,10), rep(20,10),rep(30,10),rep(40,10)), "Treatment"= c(c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5))), "value"=c(apply(gradient.test1$Rep1, MARGIN=2, sum),apply(gradient.test10$Rep1, MARGIN=2, sum),apply(gradient.test20$Rep1, MARGIN=2, sum),apply(gradient.test30$Rep1, MARGIN=2, sum),apply(gradient.test40$Rep1, MARGIN=2, sum)))
Mload %>% group_by(Variation, Treatment) %>% summarize(mean=mean(value), SE=sd(value)/sqrt(5)) ->mload
mload
p <- ggplot(mload, aes(x=Variation, y=mean, fill=as.factor(Treatment))) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2,
position=position_dodge(.9))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
# impose gradients at different variances
gradient.test1<-impose.gradient2(init.sksp05, grad=0)
gradient.test10<-impose.gradient2(init.sksp05, grad=1)
gradient.test20<-impose.gradient2(init.sksp05, grad=2)
gradient.test30<-impose.gradient2(init.sksp05, grad=3)
gradient.test40<-impose.gradient2(init.sksp05, grad=4)
Mload<-data.frame("Variation"=c(rep(1,10), rep(10,10), rep(20,10),rep(30,10),rep(40,10)), "Treatment"= c(c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5))), "value"=c(apply(gradient.test1$Rep1, MARGIN=2, sum),apply(gradient.test10$Rep1, MARGIN=2, sum),apply(gradient.test20$Rep1, MARGIN=2, sum),apply(gradient.test30$Rep1, MARGIN=2, sum),apply(gradient.test40$Rep1, MARGIN=2, sum)))
Mload %>% group_by(Variation, Treatment) %>% summarize(mean=mean(value), SE=sd(value)/sqrt(5)) ->mload
mload
p <- ggplot(mload, aes(x=Variation, y=mean, fill=as.factor(Treatment))) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2,
position=position_dodge(.9))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
gradient.test1<-impose.gradient2(init.sksp05, grad=0)
gradient.test10<-impose.gradient2(init.sksp05, grad=1)
gradient.test20<-impose.gradient2(init.sksp05, grad=2)
gradient.test30<-impose.gradient2(init.sksp05, grad=3)
gradient.test40<-impose.gradient2(init.sksp05, grad=4)
Mload<-data.frame("Variation"=c(rep(1,10), rep(10,10), rep(20,10),rep(30,10),rep(40,10)), "Treatment"= c(c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5)),c(rep(1,5), rep(2,5))), "value"=c(apply(gradient.test1$Rep1, MARGIN=2, sum),apply(gradient.test10$Rep1, MARGIN=2, sum),apply(gradient.test20$Rep1, MARGIN=2, sum),apply(gradient.test30$Rep1, MARGIN=2, sum),apply(gradient.test40$Rep1, MARGIN=2, sum)))
Mload %>% group_by(Variation, Treatment) %>% summarize(mean=mean(value), SE=sd(value)/sqrt(5)) ->mload
mload
p <- ggplot(mload, aes(x=Variation, y=mean, fill=as.factor(Treatment))) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.2,
position=position_dodge(.9))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
p <- ggplot(mload, aes(x=Variation, y=mean, fill=as.factor(Treatment))) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.9,
position=position_dodge(.9))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
p <- ggplot(mload, aes(x=Variation, y=mean, fill=as.factor(Treatment))) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.9,
position=position_dodge(2))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
p <- ggplot(mload, aes(x=Variation, y=mean, fill=as.factor(Treatment))) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.9,
position=position_dodge(10))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
p <- ggplot(mload, aes(x=Variation, y=mean, fill=as.factor(Treatment))) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.9,
position=position_dodge(8))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
p <- ggplot(mload, aes(x=Variation, y=mean, fill=as.factor(Treatment))) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=2,
position=position_dodge(8))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
mload$Treatment<-as.factor(Treatment)
p <- ggplot(mload, aes(x=Variation, y=mean, fill=Treatment)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=2,
position=position_dodge(8))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
mload$Treatment<-as.factor(Treatment)
mload$Treatment<-as.factor(mload$Treatment)
p <- ggplot(mload, aes(x=Variation, y=mean, fill=Treatment)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=2,
position=position_dodge(8))
p + scale_fill_brewer(palette="Paired") + theme_minimal()
library(vegan)
library(phyloseq)
library(QSeq)
library(ggplot2)
library(viridis)
# import datasets (GLU, FSP, TFW) ####
GLU<-readRDS("Data/GLU_comdat.RDS")
setwd("~/Documents/GitHub/QSeq_Model")
# import datasets (GLU, FSP, TFW) ####
GLU<-readRDS("Data/GLU_comdat.RDS")
# import datasets (GLU, FSP, TFW) ####
GLU<-readRDS("Data/GLU_comdat.RDS")
# move copy into project directory
FSP<-readRDS("Data/FSP_comdat.rds")
# import TFW, prepare meta data
TFW<-readRDS("Data/TFW_comdat.RDS")
meta<-read.csv("Data/TFW_metadata.csv")
rownames(meta)<-meta$ID
sample_data(TFW)<-sample_data(meta)
sample_names(TFW)<-paste("Sample_", sample_names(TFW), sep="")
# function to run beta diveristy method:
# ps = phyloseq object
# col = list of sample metadata column names that will be used for permanova:
# type = "cov" or "factor"
# strata = blocking factor
# method = type of distance matrix to implement
run.adonis<-function(ps, col, type, method, strata=NULL){
ps2<-ps
# remove taxa and samples that do not have any data:
if(any(taxa_sums(ps2)==0)){ps2<-prune_taxa(taxa_sums(ps2)>0, ps2)}
if(any(sample_sums(ps2)==0)){ps2<-prune_samples(sample_sums(ps2)>0, ps2)}
print(ps2)
# make array for output
#out<-data.frame("Factors"=col, "R2"=rep(NA, length(col)), "P_val"=rep(NA, length(col)))
# for each model, run permanova, extract R SQ values, put in order, output data frame with one column for each model design
out<-NULL
if(type=="cov"){
out$P<-matrix(ncol=nrow(col), nrow=ncol(col))
out$R<-matrix(ncol=nrow(col), nrow=ncol(col))
print(col[1,])
print(col)
print(dim(out$P))
rownames(out$P)<-col[1,]
rownames(out$R)<-col[1,]
otu<-as.data.frame(as.matrix(otu_table(ps2)))
# make sure otu table is in the correct orientation
if(taxa_are_rows(ps2)){otu <- t(otu)}
for(i in 1:nrow(col)){
# subset to samples with metadata
# ps2<-prune_samples(!is.na(sample_data(ps)[[i]]), ps)
# output otu table
# run permanova
#perm<-adonis(otu~as.numeric(as.character(sample_data(ps2)[[i]])),
perm<-adonis(otu~as.numeric(as.character(sample_data(ps2)[[col[i,1]]]))+as.numeric(as.character(sample_data(ps2)[[col[i,2]]]))+as.numeric(as.character(sample_data(ps2)[[col[i,3]]]))+as.numeric(as.character(sample_data(ps2)[[col[i,4]]])),
#strata=sample_data(ps2)[[strata]],
method="jaccard")
# extract P value and R squared
mtch<-match(col[i,], rownames(out$R))
print(col[i,])
print(rownames(out$R))
print(mtch)
print(perm$aov.tab$R2)
out$R[,i]<-perm$aov.tab$R2[1:ncol(col)][mtch]
out$P[,i]<-perm$aov.tab$`Pr(>F)`[1:ncol(col)][mtch]
}
}
# ignore factor for now
if(type=="factor"){
for(i in col){
# output otu table
otu<-as.data.frame(as.matrix(otu_table(ps2)))
print(dim(otu))
# make sure otu table is in the correct orientation
if(taxa_are_rows(ps2)){otu <- as.data.frame(t(as.matrix(otu_table(ps2))))}
# run permanova
out<-adonis2(as.matrix(otu)~as.factor(as.character(sample_data(ps2)[[col]])),
#strata=sample_data(ps2)[[strata]],
method=method)
# extract P value and R squared
}
}
out
}
sd(sample_data(GLU)$QPCR_16s)/mean(sample_data(GLU)$QPCR_16s) # 0.75
sd(sample_data(FSP)$Bac_QPCR)/mean(sample_data(FSP)$Bac_QPCR) # 1.28
sd(sample_data(TFW)$QPCR_16S)/mean(sample_data(TFW)$QPCR_16S) # 0.98
# Qseq transformation ####
Q.FSP<-QSeq(FSP, "Bac_QPCR")
Q.GLU<-QSeq(GLU, "QPCR_16s")
Q.TFW<-QSeq(TFW, "QPCR_16S")
# run permanovas: data for Table 3 ####
# FSP permanova
# relative abundance:
run.adonis(transform_sample_counts(FSP, function(x) x/sum(x)), col="Treatment", type="factor", method="jaccard")
run.adonis(transform_sample_counts(FSP, function(x) x/sum(x)), col="Treatment", type="factor", method="bray")
run.adonis(transform_sample_counts(FSP, function(x) x/sum(x)), col="Depth", type="factor", method="jaccard")
run.adonis(transform_sample_counts(FSP, function(x) x/sum(x)), col="Depth", type="factor", method="bray")
# aitchison distance
run.adonis(FSP, col="Treatment", type="factor", method="robust.aitchison")
run.adonis(transform_sample_counts(FSP, function(x) x+1), col="Treatment", type="factor", method="aitchison")
run.adonis(FSP, col="Depth", type="factor", method="robust.aitchison")
run.adonis(transform_sample_counts(FSP, function(x) x+1), col="Depth", type="factor", method="aitchison")
# QSeq
run.adonis(Q.FSP, col="Treatment", type="factor", method="jaccard")
run.adonis(Q.FSP, col="Treatment", type="factor", method="bray")
run.adonis(Q.FSP, col="Depth", type="factor", method="jaccard")
run.adonis(Q.FSP, col="Depth", type="factor", method="bray")
# GLUSEEN
# relative abundance:
run.adonis(transform_sample_counts(GLU, function(x) x/sum(x)), col="Cities", type="factor", method="jaccard")
run.adonis(transform_sample_counts(GLU, function(x) x/sum(x)), col="Cities", type="factor", method="bray")
run.adonis(transform_sample_counts(GLU, function(x) x/sum(x)), col="Codes", type="factor", method="jaccard")
run.adonis(transform_sample_counts(GLU, function(x) x/sum(x)), col="Codes", type="factor", method="bray")
# aitchison:
run.adonis(GLU, col="Cities", type="factor", method="robust.aitchison")
run.adonis(transform_sample_counts(GLU, function(x) x+1), col="Cities", type="factor", method="aitchison")
run.adonis(GLU, col="Codes", type="factor", method="robust.aitchison")
run.adonis(transform_sample_counts(GLU, function(x) x+1), col="Codes", type="factor", method="aitchison")
# QSeq:
run.adonis(Q.GLU, col="Cities", type="factor", method="jaccard")
run.adonis(Q.GLU, col="Cities", type="factor", method="bray")
# plot:
ggplot(density.plot, aes(x = log(Abundance), fill = dataset)) + geom_density(alpha = 0.5) + theme_bw() + scale_fill_viridis_d()
# Figure 3####
# make data frame of abundance data across datasets:
density.plot<-data.frame("dataset"=c(rep("TFW", nsamples(TFW)), rep("GLUSEEN", nsamples(GLU)), rep("FSP", nsamples(FSP))), "Abundance"=c(as.numeric(sample_data(TFW)$QPCR_16S), as.numeric(sample_data(GLU)$QPCR_16s),as.numeric(sample_data(FSP)$Bac_QPCR)))
# plot:
ggplot(density.plot, aes(x = log(Abundance), fill = dataset)) + geom_density(alpha = 0.5) + theme_bw() + scale_fill_viridis_d()
ggplot(density.plot, aes(x = log(Abundance), fill = dataset)) +
geom_density(alpha = 0.5) +
theme_bw() #+ scale_fill_viridis_d()
ggplot(density.plot, aes(x = log(Abundance), fill = dataset)) +
geom_density(alpha = 0.5) +
theme_bw() + scale_fill_manual(values=c("#5A4A6F", "#E47250", "#9D5A6C"))
p + scale_fill_brewer(palette="Paired") + theme_bw()
p + scale_fill_brewer() + theme_bw()
p +  scale_fill_manual(values=c("#5A4A6F", "#E47250"))+theme_bw()
p + theme_bw() + scale_fill_viridis_d()
?scale_fill_viridis_d
p + theme_bw() + scale_fill_magma_d()
p + theme_bw() + scale_fill_viridis_d() +geom_density(alpha = 0.5) +
scale_fill_manual(values=c("#5A4A6F", "#E47250", "#9D5A6C"))+
scale_fill_brewer() + theme_bw()
p + theme_bw() + scale_fill_viridis_d() +geom_density(alpha = 0.5)
p + theme_bw() + scale_fill_viridis_d(alpha=0.5)
p + theme_bw() + scale_fill_viridis_d(alpha=0.3)
p + theme_bw() + scale_fill_viridis_d(alpha=0.7)
effectplots.grad$GTP
cite(vegan)
citation(vegan)
citation("vegan")
library(rf)
installed.packages()
df<-installed.packages()
View(df)
